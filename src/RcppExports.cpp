// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cosine_similarity
double cosine_similarity(const NumericVector& x, const NumericVector& y);
RcppExport SEXP _hvr_cosine_similarity(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cosine_similarity(x, y));
    return rcpp_result_gen;
END_RCPP
}
// cosine_similarities
NumericVector cosine_similarities(const NumericVector& vector, const NumericMatrix& vectors);
RcppExport SEXP _hvr_cosine_similarities(SEXP vectorSEXP, SEXP vectorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type vector(vectorSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type vectors(vectorsSEXP);
    rcpp_result_gen = Rcpp::wrap(cosine_similarities(vector, vectors));
    return rcpp_result_gen;
END_RCPP
}
// cost
double cost(const NumericVector& weights, const NumericMatrix& observation_matrix, const List& continuation_matrices, const List& legal);
RcppExport SEXP _hvr_cost(SEXP weightsSEXP, SEXP observation_matrixSEXP, SEXP continuation_matricesSEXP, SEXP legalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type observation_matrix(observation_matrixSEXP);
    Rcpp::traits::input_parameter< const List& >::type continuation_matrices(continuation_matricesSEXP);
    Rcpp::traits::input_parameter< const List& >::type legal(legalSEXP);
    rcpp_result_gen = Rcpp::wrap(cost(weights, observation_matrix, continuation_matrices, legal));
    return rcpp_result_gen;
END_RCPP
}
// gradient
NumericVector gradient(const NumericVector& weights, const NumericMatrix& observation_matrix, const List& continuation_matrices, const List& legal);
RcppExport SEXP _hvr_gradient(SEXP weightsSEXP, SEXP observation_matrixSEXP, SEXP continuation_matricesSEXP, SEXP legalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type observation_matrix(observation_matrixSEXP);
    Rcpp::traits::input_parameter< const List& >::type continuation_matrices(continuation_matricesSEXP);
    Rcpp::traits::input_parameter< const List& >::type legal(legalSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient(weights, observation_matrix, continuation_matrices, legal));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hvr_cosine_similarity", (DL_FUNC) &_hvr_cosine_similarity, 2},
    {"_hvr_cosine_similarities", (DL_FUNC) &_hvr_cosine_similarities, 2},
    {"_hvr_cost", (DL_FUNC) &_hvr_cost, 4},
    {"_hvr_gradient", (DL_FUNC) &_hvr_gradient, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_hvr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
